{"version":3,"sources":["assets/logo.svg","pages/Home/index.tsx","services/api.ts","components/Dropzone/index.tsx","pages/CreatePoint/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","api","axios","create","baseURL","Dropzone","onFileUploaded","useState","selectedFileUrl","setselectedFileUrl","onDrop","useCallback","accpetedFiles","file","fileUrl","URL","createObjectURL","useDropzone","accept","getRootProps","getInputProps","CreatePoint","items","setItems","ufs","setUfs","cities","setCities","initialPosition","setInitialPosition","name","email","whatsapp","formData","setFormData","selectedUf","setSelectedUf","selectedCity","setSelectedCity","selectedItems","setSelectedItems","selectedPosition","setSelectedPosition","selectedFile","setSelectedFile","history","useHistory","handleInputChange","event","target","value","a","preventDefault","uf","city","latitude","longitude","data","FormData","append","String","join","post","alert","push","useEffect","navigator","geolocation","getCurrentPosition","position","coords","get","then","response","ufInitials","map","sigla","cityNames","nome","onSubmit","htmlFor","type","onChange","Map","center","zoom","onCLick","latlng","lat","lng","TileLayer","attribution","url","Marker","key","item","onClick","findIndex","filteredItems","filter","handleSelectItem","includes","image_url","title","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db854793.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.26434f1f.svg\";","import React from 'react'\r\nimport { FiLogIn } from 'react-icons/fi'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport logo from '../../assets/logo.svg'\r\nimport './styles.css'\r\n\r\nconst Home = ()=> {\r\n  return (\r\n    <div id=\"page-home\">\r\n      <div className=\"content\">\r\n        <header>\r\n          <img src={logo} alt=\"Ecoleta\"/>\r\n        </header>\r\n        <main>\r\n          <h1>Seu marketplace de coleta de res√≠duos.</h1>\r\n          <p>Ajudamos pessoas a encontratem pontos de coleta de forma eficiente.</p>\r\n\r\n          <Link to=\"/create-point\">\r\n            <span>\r\n             <FiLogIn />\r\n            </span>\r\n            <strong>Cadastre um ponto de coleta</strong>\r\n          </Link>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3333'\r\n})\r\n\r\nexport default api\r\n","import React, { useCallback, useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { FiUpload } from 'react-icons/fi'\r\n\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n  onFileUploaded: (file: File) => void\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({ onFileUploaded }) => {\r\n  \r\n  const [selectedFileUrl, setselectedFileUrl] = useState('')\r\n\r\n  const onDrop = useCallback(accpetedFiles => {\r\n    const file = accpetedFiles[0]\r\n\r\n    const fileUrl = URL.createObjectURL(file)\r\n\r\n    setselectedFileUrl(fileUrl)\r\n    onFileUploaded(file)\r\n  }, [onFileUploaded])\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    accept: 'image/*'\r\n  })\r\n\r\n  return (\r\n    <div className=\"dropzone\" { ...getRootProps() }>\r\n      <input { ...getInputProps() } accept=\"image/*\" />\r\n\r\n      { selectedFileUrl\r\n        ? <img src={selectedFileUrl} alt=\"Point thumbnail\"/>\r\n        : (\r\n          <p>\r\n            <FiUpload />\r\n            Imagem do estabelecimento\r\n          </p>\r\n        )\r\n      }      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dropzone","import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { FiArrowLeft } from 'react-icons/fi'\r\nimport { Map, TileLayer, Marker } from 'react-leaflet'\r\nimport axios from 'axios'\r\nimport { LeafletMouseEvent } from 'leaflet'\r\nimport api from '../../services/api'\r\n\r\nimport Dropzone from '../../components/Dropzone'\r\n\r\nimport './styles.css'\r\nimport logo from '../../assets/logo.svg'\r\n\r\n// array ou bojeto: manualmente informar o tipo da variavel\r\n\r\ninterface Item {\r\n  id: number;\r\n  title: string;\r\n  image_url: string\r\n}\r\n\r\ninterface IBGEUFResponse {\r\n  sigla: string;\r\n}\r\n\r\ninterface IBGECityResponse {\r\n  nome: string;\r\n}\r\n\r\nconst CreatePoint = () => {\r\n  const [items, setItems] = useState<Item[]>([])\r\n  const [ufs, setUfs] = useState<string[]>([])\r\n  const [cities, setCities] = useState<string[]>([])\r\n  const [initialPosition, setInitialPosition] = useState<[number, number]>([0, 0])\r\n\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    whatsapp: ''\r\n  })\r\n\r\n  const [selectedUf, setSelectedUf] = useState('0')\r\n  const [selectedCity, setSelectedCity] = useState('0')\r\n  const [selectedItems, setSelectedItems] = useState<number[]>([])\r\n  const [selectedPosition, setSelectedPosition] = useState<[number, number]>([0, 0])\r\n  const [selectedFile, setSelectedFile] = useState<File>()\r\n\r\n  const history = useHistory()\r\n    \r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(position => {\r\n      const { latitude, longitude } = position.coords\r\n\r\n      setInitialPosition([latitude, longitude])\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    api.get('items').then(response => {\r\n      setItems(response.data)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    axios.get<IBGEUFResponse[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados').then( response => {\r\n      const ufInitials = response.data.map(uf => uf.sigla)\r\n\r\n      setUfs(ufInitials)\r\n    })\r\n  }, [])\r\n\r\n  useEffect (() => {\r\n    //carregar as cidades sempre que a UF mudar\r\n    if (selectedUf === '0') {\r\n      return\r\n    }\r\n\r\n    axios\r\n      .get<IBGECityResponse[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`)\r\n      .then(response => {\r\n        const cityNames = response.data.map(city => city.nome)\r\n\r\n        setCities(cityNames)\r\n      })\r\n  }, [selectedUf])\r\n\r\n  function handleSelectUf(event: ChangeEvent<HTMLSelectElement>) {\r\n    const uf = event.target.value\r\n\r\n    setSelectedUf(uf)\r\n  }\r\n\r\n  function handleSelectCity(event: ChangeEvent<HTMLSelectElement>) {\r\n    const city = event.target.value\r\n\r\n    setSelectedCity(city)\r\n  }\r\n\r\n  function handleMapClick(event: LeafletMouseEvent) {\r\n    setSelectedPosition([\r\n      event.latlng.lat,\r\n      event.latlng.lng\r\n    ])\r\n  }\r\n\r\n  function handleInputChange(event: ChangeEvent<HTMLInputElement>) {    \r\n    const { name, value } = event.target\r\n\r\n    setFormData({ ...formData, [name]: value })\r\n  }\r\n\r\n  function handleSelectItem(id: number) {\r\n    const alreadySelected = selectedItems.findIndex(item => item === id)\r\n\r\n    if(alreadySelected >=0) {\r\n      const filteredItems = selectedItems.filter(item => item !== id)\r\n\r\n      setSelectedItems(filteredItems)\r\n    } else {\r\n      setSelectedItems([ ...selectedItems, id ])\r\n    }    \r\n  }\r\n\r\n  async function handleSubmit(event: FormEvent) {\r\n    event.preventDefault()\r\n    \r\n    const { name, email, whatsapp } = formData\r\n    const uf = selectedUf\r\n    const city = selectedCity\r\n    const [latitude, longitude] = selectedPosition\r\n    const items = selectedItems\r\n\r\n    const data = new FormData()\r\n    \r\n    data.append('name', name);\r\n    data.append('email', email);\r\n    data.append('whatsapp', whatsapp);\r\n    data.append('uf', uf);\r\n    data.append('city', city);\r\n    data.append('latitude', String(latitude));\r\n    data.append('longitude', String(longitude));\r\n    data.append('items', items.join(','));\r\n    \r\n    if ( selectedFile ) {\r\n      data.append('image', selectedFile)\r\n    }\r\n\r\n    await api.post('points', data)\r\n    \r\n    alert('Ponto de coleta criado')\r\n\r\n    history.push('/')    \r\n  }\r\n\r\n  return (\r\n    <div id=\"page-create-point\">\r\n      <header>\r\n        <img src={logo} alt=\"Ecoleta\"/>\r\n        <Link to=\"/\">\r\n          <FiArrowLeft />\r\n          Voltar para home\r\n        </Link>\r\n      </header>\r\n      <form onSubmit={handleSubmit}>\r\n        <h1>Cadastro do <br/> ponto de coleta</h1>\r\n\r\n        <Dropzone onFileUploaded={setSelectedFile} />\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>Dados</h2>\r\n          </legend>\r\n          <div className=\"field\">\r\n            <label htmlFor=\"name\">Nome da entidade</label>\r\n            <input \r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              onChange={handleInputChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"field-group\">\r\n            <div className=\"field\">\r\n              <label htmlFor=\"email\">E-mail</label>\r\n              <input \r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <label htmlFor=\"whatsapp\">Whatsapp</label>\r\n              <input \r\n                type=\"text\"\r\n                name=\"whatsapp\"\r\n                id=\"whatsapp\"\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>Endere√ßo</h2>\r\n            <span>Selecione o endere√ßo no mapa</span>\r\n          </legend>\r\n\r\n          <Map center={initialPosition} zoom={15} onCLick={handleMapClick}>\r\n            <TileLayer\r\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker position={selectedPosition} />\r\n          </Map>\r\n\r\n          <div className=\"field-group\">\r\n            <div className=\"field\">\r\n              <label htmlFor=\"uf\">Estado (UF)</label>\r\n              <select \r\n                name=\"uf\" \r\n                id=\"uf\" \r\n                value={selectedUf}\r\n                onChange={handleSelectUf}\r\n              >\r\n                <option value=\"0\">Selecione uma UF</option>\r\n                {ufs.map(uf => (\r\n                  <option key={uf} value={uf}>{uf}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label htmlFor=\"city\">Cidade</label>\r\n              <select \r\n                name=\"city\" \r\n                id=\"city\" \r\n                value={selectedCity} \r\n                onChange={handleSelectCity}\r\n              >\r\n                <option value=\"0\">Selecione uma Cidade</option>\r\n                {cities.map(city => (\r\n                  <option key={city} value={city}>{city}</option>\r\n                ))}\r\n              </select>\r\n            </div>          \r\n          </div>        \r\n        </fieldset>\r\n\r\n        <fieldset>\r\n          <legend>\r\n            <h2>√çtens de coleta</h2>\r\n            <span>Selecione um ou mais itens abaixo</span>\r\n          </legend>\r\n\r\n          <ul className=\"items-grid\">\r\n            {items.map(item =>(\r\n              <li \r\n                key={item.id} \r\n                onClick={() => handleSelectItem(item.id)}\r\n                className={selectedItems.includes(item.id) ? 'selected' : ''}\r\n              >\r\n                <img src={item.image_url} alt={item.title}/>\r\n                <span>{item.title}</span>\r\n              </li>\r\n            ))}\r\n            \r\n          </ul>          \r\n        </fieldset>\r\n        <button type=\"submit\">\r\n          Cadastrar ponto de coleta\r\n        </button>\r\n      </form>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreatePoint","import React from 'react'\r\nimport { Route, BrowserRouter} from 'react-router-dom'\r\n\r\nimport Home from './pages/Home'\r\nimport CreatePoint from './pages/CreatePoint'\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Route component={Home} path=\"/Ecoleta\" exact />\r\n      <Route component={CreatePoint} path=\"/create-point\" />\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport Routes from './routes'\r\n\r\nfunction App() {\r\n  \r\n  return (    \r\n    <Routes />    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}